#!/bin/bash
# The shebang is just a hint for editors.

###############################################################################
#
#  "socksproxyenv" is a script to export the SOCKS_PROXY env var.
#  Please keep in mind that this script will NOT be executed directly. Instead,
#  it will be evaluated by "source" command.
#
#  You can just export your socks5 server as simple as:
#
#    export SOCKS_PROXY="localhost:1080"
#
#  Alternatively, you can also do something complex, for example:
#
#    # Create a ssh tunnel on the fly
#    PORT=1088
#    if [ $(netstat -an | grep ${PORT} | grep LISTEN | wc -l) = "0" ]; then
#      ssh -o "ServerAliveInterval=60" -o "ServerAliveCountMax=3" \
#          -o "TCPKeepAlive=yes" -f -N -D 127.0.0.1:${PORT} user@your_server
#    fi
#    export SOCKS_PROXY="localhost:${PORT}"
#

export SOCKS_PROXY=


###############################################################################
# Advance Configuration
###############################################################################

# socks-cli has a few pluggable supports for various kinds of CLI commands.
# You can disable some of them as you wish. For example, if you don't run git
# command at all, you can just comment out the line "LOAD_SUPPORT git".

LOAD_SUPPORT git
LOAD_SUPPORT http
LOAD_SUPPORT wget
LOAD_SUPPORT mvn


# Further more, you can extend socks-cli to support more CLI commands, by
# exporting dedicated variables with the "EXPORT_ENV" DSL. socks-cli will take
# care of these variables as well.
# For example, to export FTP_PROXY:
#   EXPORT_ENV FTP_PROXY "http://${SOCKS_CLI_HTTP_PROXY}"

EXPORT_ENV FOO "this is an example of EXPORT_ENV and should be removed!"


# However, not all program has built-in proxy support. To settle these
# situations, dsocks (https://github.com/zjx20/dsocks) has been integrated
# into socks-cli.
#
# *PLEASE NOTICE* that dsocks doesn't work well with system binaries on
# macOS 10.11+ because of the SIP feature (a.k.a. System Integrity Protection).

# Uncomment the line "LOAD_SUPPORT dsocks" to enable the dsocks support.
# "git" and "gcc" will be needed to bootstrap dsocks.

# LOAD_SUPPORT dsocks

# And then use the SOCKSIFY DSL to define which command to be socksified.
# For example:
#   # socksify the curl command
#   SOCKSIFY curl
#   # socksify the python command and use "/usr/bin/env python" to run python
#   SOCKSIFY python  /usr/bin/env python
#
# After socksifying the "python" command, for example, you can run the
# following code snippet to verify it:
#
#   python -c "import urllib2;print(urllib2.urlopen('http://fb.com/').read())"
