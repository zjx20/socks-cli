#!/bin/bash
# The shebang is just a hint for editors.

_socks_cli_py_wrapper="${SOCKS_CLI_DIR}/py/py_wrapper"

function socks_cli_activate_http() {
    _socks_cli_http_port_tmp_file=$(mktemp)

    # Run socks2http.py in foreground mode, so that it will be terminated automatically
    # even when the shell exited without deactivating.
    "${_socks_cli_py_wrapper}" "${SOCKS_CLI_DIR}/py/socks2http/socks2http.py" \
            -s "${SOCKS_PROXY}" -f $$ \
            --save-port "${_socks_cli_http_port_tmp_file}" &
    _socks_cli_http_proxy_pid=$!
    # Waits for the http proxy to startup at most 10 seconds.
    for (( c=1; c<=50; c++ )); do
        # Use python to sleep for better portability
        "${_socks_cli_py_wrapper}" -c "import time;time.sleep(0.2)"
        _socks_cli_http_proxy_port=$(cat "${_socks_cli_http_port_tmp_file}")
        if [ "${_socks_cli_http_proxy_port}" != "" ]; then
            break
        fi
    done

    if [ "${_socks_cli_http_proxy_port}" = "" ]; then
        _logerror "Error: failed to start the http proxy server,"
        _logerror "       HTTP_PROXY and HTTPS_PROXY won't be set."
    else
        SOCKS_CLI_HTTP_PROXY="127.0.0.1:${_socks_cli_http_proxy_port}"
        EXPORT_ENV HTTP_PROXY  "http://${SOCKS_CLI_HTTP_PROXY}"
        EXPORT_ENV HTTPS_PROXY "http://${SOCKS_CLI_HTTP_PROXY}"
    fi
}

function socks_cli_deactivate_http() {
    if [ "${_socks_cli_http_proxy_pid}" != "" ]; then
        # Make sure it's the right process to kill
        _pid=$(pgrep -f socks2http.py | grep ${_socks_cli_http_proxy_pid})
        [ -n "${_pid}" ] && { kill "${_pid}" && wait "${_pid}"; } 2>/dev/null
    fi

    unset SOCKS_CLI_HTTP_PROXY
    unset _socks_cli_http_proxy_pid
    unset _socks_cli_http_proxy_port
}
